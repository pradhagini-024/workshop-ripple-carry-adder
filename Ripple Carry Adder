# RIPPLE CARRY ADDER

**AIM:**

To study and verify the truth table of Ripple Carry Adder in Quartus II using Verilog programming.

**Equipments Required:**

Software – Quartus prime

**Theory:**

A Ripple Carry Adder (RCA) is a basic arithmetic circuit used to add two binary numbers. It consists of multiple full adders connected in a chain, where the carry output from each full adder "ripples" to
the next.

**Full Adder Logic:**

A full adder adds three inputs: two bits A and B, and a carry-in Cin. It produces a sum S and a carryout Cout as outputs.
Sum (S) = A ⊕ B ⊕ Cin (XOR operation)
Carry-out (Cout) = (A ⋅ B) + (Cin ⋅ (A ⊕ B)) (AND and OR operations)

**Ripple Carry Adder:**

For an N-bit Ripple Carry Adder, we connect N full adders in sequence. The carry-out from each full adder is connected to the carry-in of the next full adder.

**Procedure:**

1. Type the program in Quartus software.
2. Compile and run the program.
3. Generate the RTL schematic and save the logic diagram.
4. Create nodes for inputs and outputs to generate the timing diagram.
5. For different input combinations generate the timing diagram.

**PROGRAM:**

Developed by: Pradhagini A Register Number: 212224050031

Verilog HDL Code for 4-bit Ripple Carry Adder:

```
module full_adder (A,B,Cin,Sum,Cout);
input A, B, Cin;
output Sum, Cout;
assign Sum = A ^ B ^ Cin;
assign Cout = (A & B) | (Cin & (A ^ B));
endmodule
// 4-bit Ripple Carry Adder Module
module RP2 (A,B,Cin,Sum,Cout);
input [3:0] A, B;
input Cin;
output [3:0] Sum;
output Cout;
wire C1, C2, C3;
// Instantiate 4 full adders
full_adder FA0 (A[0], B[0], Cin, Sum[0], C1); // Least significant bit (LSB)
full_adder FA1 (A[1], B[1], C1, Sum[1], C2);
full_adder FA2 (A[2], B[2], C2, Sum[2], C3);
full_adder FA3 (A[3], B[3], C3, Sum[3], Cout); // Most significant bit (MSB)
endmodule
```

**Example:**

pic

**RTL:**

Ripple Carry Adder:

pic

**Timing Diagram**:

Ripple Carry Adder:

pic

Result:

Thus the truth table of Ripple Carry Adder is verified in Quartus II using Verilog programming.
